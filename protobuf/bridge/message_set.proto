/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// In proto2, we implement MessageSet in terms of extensions, except with a
// special wire format for backwards-compatibility.  To define a message that
// goes in a MessageSet in proto2, you must declare within that message's
// scope an extension of MessageSet named "message_set_extension" and with
// the field number matching the type ID.  So, for example, this proto1 code:
//   message Foo {
//     enum TypeId { MESSAGE_TYPE_ID = 1234; }
//   }
// becomes this proto2 code:
//   message Foo {
//     extend proto2.bridge.MessageSet {
//       optional Foo message_set_extension = 1234;
//     }
//   }
//
// Now you can use the usual proto2 extensions accessors to access this
// message.  For example, the proto1 code:
//   MessageSet mset;
//   Foo* foo = mset.get_mutable<Foo>();
// becomes this proto2 code:
//   proto2::bridge::MessageSet mset;
//   Foo* foo = mset.MutableExtension(Foo::message_set_extension);
//
// Of course, new code that doesn't have backwards-compatibility requirements
// should just use extensions themselves and not worry about MessageSet.


syntax = "proto2";

package java.apphosting;

option java_package = "com.google.protos.proto2.bridge";

option java_outer_classname = "MessageSetProtos";
option java_multiple_files = true;
option cc_enable_arenas = true;

// This is proto2's version of MessageSet.
message MessageSet {
  option message_set_wire_format = true;

  extensions 4 to max;
}
