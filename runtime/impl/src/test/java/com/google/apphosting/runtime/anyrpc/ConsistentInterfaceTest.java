/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.apphosting.runtime.anyrpc;

import static com.google.common.collect.ImmutableSortedMap.toImmutableSortedMap;
import static com.google.common.truth.Truth.assertThat;
import static java.util.Arrays.stream;
import static java.util.Comparator.naturalOrder;

import com.google.apphosting.base.protos.CloneControllerGrpc.CloneControllerImplBase;
import com.google.apphosting.base.protos.EvaluationRuntimeGrpc.EvaluationRuntimeImplBase;
import com.google.common.collect.ImmutableSortedMap;
import com.google.common.truth.Expect;
import io.grpc.stub.StreamObserver;
import java.lang.reflect.Method;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * Check that the AnyRpc replacements for gRPC interfaces are consistent with those interfaces.
 *
 */
@RunWith(JUnit4.class)
public class ConsistentInterfaceTest {
  @Rule public final Expect expect = Expect.create();

  @Test
  public void testEvaluationRuntime() {
    check(EvaluationRuntimeImplBase.class, EvaluationRuntimeServerInterface.class);
  }

  @Test
  public void testCloneController() {
    check(CloneControllerImplBase.class, CloneControllerServerInterface.class);
  }

  /**
   * Check that the given {@code FooImplBase} class generated by gRPC and the given interface have
   * consistent methods. Each RPC method {@code methodName} looks like this in the gRPC class:
   *
   * <pre>{@code
   * public void methodName(RequestType request, StreamObserver<ResponseType> responseObserver)
   * }</pre>
   *
   * and like this in the AnyRpc interface:
   *
   * <pre>{@code
   * public void methodName(AnyRpcServerContext ctx, RequestType req)
   * }</pre>
   *
   * where the {@code methodName}, {@code RequestType}, and {@code ResponseType} depend on the
   * method and the other types are fixed.
   *
   * <p>We construct a map from {@code methodName} to {@code RequestType} for the gRPC class and
   * the AnyRpc interface, and check that the two maps are the same.
   *
   * <p>The {@code FooImplBase} class is the one that a gRPC server for the service in question is
   * supposed to implement, and if this test fails it probably means that the service has acquired
   * additional methods that we haven't added to the AnyRpc interface yet.
   *
   * <p>The {@code ResponseType} isn't referenced in the AnyRpc interface so we don't check it. But
   * if it did change then our gRPC server implementation would no longer compile.
   */
  private static void check(Class<?> gRpcClass, Class<?> anyRpcInterface) {
    assertThat(anyRpcInterface.isInterface()).isTrue();
    ImmutableSortedMap<String, Class<?>> gRpcMethods =
        stream(gRpcClass.getMethods())
            .filter(
                m ->
                    m.getParameterTypes().length == 2
                        && m.getParameterTypes()[1] == StreamObserver.class)
            .collect(
                toImmutableSortedMap(
                    naturalOrder(), Method::getName, m -> m.getParameterTypes()[0]));
    ImmutableSortedMap<String, Class<?>> anyRpcMethods =
        stream(anyRpcInterface.getMethods())
            .filter(
                m ->
                    m.getParameterTypes().length == 2
                        && m.getParameterTypes()[0] == AnyRpcServerContext.class)
            .collect(
                toImmutableSortedMap(
                    naturalOrder(), Method::getName, m -> m.getParameterTypes()[1]));
    assertThat(anyRpcMethods).isNotEmpty();
    assertThat(anyRpcMethods).isEqualTo(gRpcMethods);
  }
}
