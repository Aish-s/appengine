/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.appengine.api.datastore;

/**
 * Test data for running legacy deserialization tests.
 *
 */
class KeyTestData {

  static final String[] APP_ID_NAMESPACES = {null, "A", "A!B"};

  // KEY_BYTES was generated with the following code in conjunction with
  // the older version of the Appengine library.
  //
  //    byte[] doSerialize(Key key) throws IOException {
  //      ByteArrayOutputStream os = new ByteArrayOutputStream();
  //      ObjectOutputStream oo = new ObjectOutputStream(os);
  //      oo.writeObject(key);
  //      oo.close();
  //      os.close();
  //      return os.toByteArray();
  //    }
  //
  //    void doPrintInfo(PrintWriter pw, String appId, Key key, byte[] data) {
  //      String appIdstr = appId;
  //      if (appIdstr == null) {
  //        appIdstr = "(null)";
  //      }
  //      pw.println("// appId:" + appIdstr + " Key:" + key.toString());
  //      pw.print("{");
  //      for (byte b : data) {
  //        int v = b;
  //        pw.print(v);
  //        pw.print(", ");
  //      }
  //      pw.println("},");
  //    }
  //
  //    void printBytes(PrintWriter pw) throws IOException {
  //      for (String appIdStr : APP_ID_NAMESPACES) {
  //        for (int j = 0; j < 2; ++j) {
  //          Key k1;
  //          Key k2;
  //          if (j == 0) {
  //            k1 = new Key("key1", null, Key.NOT_ASSIGNED, "name1", appIdStr);
  //            k2 = new Key("key2", k1, Key.NOT_ASSIGNED, "name2", appIdStr);
  //          } else {
  //            k1 = new Key("key1", null, 4321, null, appIdStr);
  //            k2 = new Key("key2", k1, 54321, null, appIdStr);
  //          }
  //          byte[] k1b = doSerialize(k1);
  //          doPrintInfo(pw, appIdStr, k1, k1b);
  //
  //          byte[] k2b = doSerialize(k2);
  //          doPrintInfo(pw, appIdStr, k2, k2b);
  //        }
  //      }
  //    }
  // Key should deserialize the appId of objects of the older class
  // definition to be an AppIdNamespace in objects of the newer Key
  // class definition.
  //
  static final byte[][] KEY_BYTES = {
    // appId:(null) Key:key1(name1)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 112, 116, 0, 4, 107, 101, 121, 49, 116, 0, 5, 110, 97,
      109, 101, 49, 112
    },
    // appId:(null) Key:key1(name1)/key2(name2)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 112, 116, 0, 4, 107, 101, 121, 50, 116, 0, 5, 110, 97,
      109, 101, 50, 115, 113, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 116, 0, 4, 107, 101, 121,
      49, 116, 0, 5, 110, 97, 109, 101, 49, 112
    },
    // appId:(null) Key:key1(4321)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 16, -31, 112, 116, 0, 4, 107, 101, 121, 49, 112, 112
    },
    // appId:(null) Key:key1(4321)/key2(54321)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, -44, 49, 112, 116, 0, 4, 107, 101, 121, 50, 112, 115, 113, 0,
      126, 0, 0, 0, 0, 0, 0, 0, 0, 16, -31, 112, 116, 0, 4, 107, 101, 121, 49, 112, 112
    },
    // appId:A Key:key1(name1)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 1, 65, 116, 0, 4, 107, 101, 121, 49, 116, 0, 5,
      110, 97, 109, 101, 49, 112
    },
    // appId:A Key:key1(name1)/key2(name2)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 1, 65, 116, 0, 4, 107, 101, 121, 50, 116, 0, 5,
      110, 97, 109, 101, 50, 115, 113, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 126, 0, 4, 116,
      0, 4, 107, 101, 121, 49, 116, 0, 5, 110, 97, 109, 101, 49, 112
    },
    // appId:A Key:key1(4321)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 16, -31, 116, 0, 1, 65, 116, 0, 4, 107, 101, 121, 49, 112, 112
    },
    // appId:A Key:key1(4321)/key2(54321)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, -44, 49, 116, 0, 1, 65, 116, 0, 4, 107, 101, 121, 50, 112,
      115, 113, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 16, -31, 113, 0, 126, 0, 4, 116, 0, 4, 107, 101,
      121, 49, 112, 112
    },
    // appId:A!B Key:key1(name1)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 3, 65, 33, 66, 116, 0, 4, 107, 101, 121, 49,
      116, 0, 5, 110, 97, 109, 101, 49, 112
    },
    // appId:A!B Key:key1(name1)/key2(name2)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 3, 65, 33, 66, 116, 0, 4, 107, 101, 121, 50,
      116, 0, 5, 110, 97, 109, 101, 50, 115, 113, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 126,
      0, 4, 116, 0, 4, 107, 101, 121, 49, 116, 0, 5, 110, 97, 109, 101, 49, 112
    },
    // appId:A!B Key:key1(4321)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, 16, -31, 116, 0, 3, 65, 33, 66, 116, 0, 4, 107, 101, 121, 49,
      112, 112
    },
    // appId:A!B Key:key1(4321)/key2(54321)
    {
      -84, -19, 0, 5, 115, 114, 0, 38, 99, 111, 109, 46, 103, 111, 111, 103, 108, 101, 46, 97, 112,
      112, 101, 110, 103, 105, 110, 101, 46, 97, 112, 105, 46, 100, 97, 116, 97, 115, 116, 111, 114,
      101, 46, 75, 101, 121, -7, -57, -39, -50, 54, 69, 5, -51, 2, 0, 5, 74, 0, 2, 105, 100, 76, 0,
      5, 97, 112, 112, 73, 100, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83,
      116, 114, 105, 110, 103, 59, 76, 0, 4, 107, 105, 110, 100, 113, 0, 126, 0, 1, 76, 0, 4, 110,
      97, 109, 101, 113, 0, 126, 0, 1, 76, 0, 9, 112, 97, 114, 101, 110, 116, 75, 101, 121, 116, 0,
      40, 76, 99, 111, 109, 47, 103, 111, 111, 103, 108, 101, 47, 97, 112, 112, 101, 110, 103, 105,
      110, 101, 47, 97, 112, 105, 47, 100, 97, 116, 97, 115, 116, 111, 114, 101, 47, 75, 101, 121,
      59, 120, 112, 0, 0, 0, 0, 0, 0, -44, 49, 116, 0, 3, 65, 33, 66, 116, 0, 4, 107, 101, 121, 50,
      112, 115, 113, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 16, -31, 113, 0, 126, 0, 4, 116, 0, 4, 107,
      101, 121, 49, 112, 112
    }
  };

  private static Key[] makeNewKeys() {
    Key[] keys = new Key[KEY_BYTES.length];
    int i = 0;
    for (String appIdStr : KeyTestData.APP_ID_NAMESPACES) {
      AppIdNamespace appId = null;
      if (appIdStr != null) {
        appId = AppIdNamespace.parseEncodedAppIdNamespace(appIdStr);
      }
      for (int j = 0; j < 2; ++j) {
        Key k1;
        Key k2;
        if (j == 0) {
          k1 = new Key("key1", null, Key.NOT_ASSIGNED, "name1", appId);
          k2 = new Key("key2", k1, Key.NOT_ASSIGNED, "name2", appId);
        } else {
          k1 = new Key("key1", null, 4321, null, appId);
          k2 = new Key("key2", k1, 54321, null, appId);
        }
        keys[i++] = k1;
        keys[i++] = k2;
      }
    }
    return keys;
  }

  static final Key[] KEYS = makeNewKeys();

  private KeyTestData() {}
}
